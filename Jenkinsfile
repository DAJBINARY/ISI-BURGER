pipeline {
    agent {
        docker {
            image 'composer:latest'  // Utilise une image Docker avec PHP et Composer pr√©install√©s
            args '-u root'  // Ex√©cute en tant que root pour √©viter les probl√®mes de permissions
        }
    }

    environment {
        DOCKER_IMAGE = "DAJBINARY/isi-burger:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm  // R√©cup√®re le code du r√©f√©rentiel source configur√© dans Jenkins
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // √âtape d'installation des d√©pendances de Laravel
                    echo " Installation des d√©pendances Laravel..."
                    sh '''
                    # Installe les d√©pendances Laravel avec Composer
                    composer install --no-interaction --prefer-dist --optimize-autoloader
                    
                    # Copie .env.example vers .env si .env n'existe pas
                    if [ ! -f .env ]; then cp .env.example .env; fi
                    
                    # G√©n√®re la cl√© d'application Laravel
                    php artisan key:generate
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // √âtape de construction de l'image Docker
                    echo "üõ† Construction de l'image Docker..."
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }
    }

    post {
        success {
            echo ' Pipeline termin√© avec succ√®s !'
        }
        failure {
            echo 'Le pipeline a √©chou√©.'
        }
        always {
            echo '‚ÑπPipeline termin√©.'
        }
    }
}
